name: Build Releases

on:
  release:
    types: [published]
  workflow_dispatch:  # Allow manual trigger for testing

env:
  BUILD_TYPE: Release
  QT_VERSION: '6.8.2'
  APP_ID: 'org.unabara.unabara'

jobs:
  # Read version from the version file.
  determine-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Get version from VERSION file
        id: get-version
        run: |
          if [ -f "VERSION.md" ]; then
            VERSION=$(cat VERSION.md | tr -d '\n' | tr -d '\r')
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "Found version: $VERSION"
          else
            echo "VERSION file not found, using default version"
            echo "version=0.1-dev" >> $GITHUB_OUTPUT
          fi
  build-linux-flatpak:
    needs: determine-version
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y flatpak flatpak-builder elfutils
        sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
        sudo flatpak install -y flathub org.kde.Sdk//6.8
        sudo flatpak install -y org.kde.Platform//6.8
    
    - name: Set up Flatpak manifest
      run: |
        cat > org.unabara.unabara.yml << EOF
        app-id: ${{ env.APP_ID }}
        runtime: org.kde.Platform
        runtime-version: '6.8'
        sdk: org.kde.Sdk
        command: unabara
        finish-args:
          - --share=ipc
          - --socket=x11
          - --socket=wayland
          - --filesystem=host
          - --device=dri
        modules:
          - name: unabara
            buildsystem: cmake-ninja
            config-opts:
              - -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}
            sources:
              - type: dir
                path: .
        EOF
    
    - name: Build Flatpak
      run: |
        flatpak-builder --repo=repo --force-clean build-dir org.unabara.unabara.yml
        flatpak build-bundle repo ${{ env.APP_ID }}_${{ needs.determine-version.outputs.version }}.flatpak ${{ env.APP_ID }}
    
    - name: Upload Linux Flatpak Artifact
      uses: actions/upload-artifact@v4
      with:
        name: unabara-linux-flatpak-${{ needs.determine-version.outputs.version }}
        path: ${{ env.APP_ID }}_${{ needs.determine-version.outputs.version }}.flatpak
        
    - name: Upload to Release
      if: github.event_name == 'release'
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: ${{ env.APP_ID }}_${{ needs.determine-version.outputs.version }}.flatpak
        asset_name: unabara-linux-${{ needs.determine-version.outputs.version }}.flatpak
        tag: ${{ github.ref }}
        overwrite: true

  build-windows:
    needs: determine-version
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Qt
      uses: jurplel/install-qt-action@v4.1.1
      with:
        aqtversion: '==3.1.*'
        version: ${{ env.QT_VERSION }}
        host: 'windows'
        target: 'desktop'
        arch: 'win64_msvc2022_64'
        modules: 'qtmultimedia qtpositioning qtwebview'
 
    - name: Install MSBuild
      run: choco install visualstudio2022buildtools --package-parameters "--add Microsoft.Component.MSBuild"

    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v2
      with:
        vs-version: '14.36'
        msbuild-architecture: x64
        
    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
      
    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --verbose
      
    - name: Package with windeployqt
      working-directory: ${{github.workspace}}/build
      run: |
        mkdir package
        if (Test-Path bin\${{env.BUILD_TYPE}}\unabara.exe) {
          copy bin\${{env.BUILD_TYPE}}\unabara.exe package\
        } elseif (Test-Path bin\unabara.exe) {
          copy bin\unabara.exe package\
        } else {
          Get-ChildItem -Recurse bin
          throw "Could not find unabara.exe in expected locations"
        }
        cd package
        $env:PATH = "$env:Qt6_DIR\bin;$env:PATH"
        windeployqt unabara.exe --release --no-translations --qmldir=../../src/ui/qml
        cd ..
        mv package ${{github.workspace}}/build/unabara-windows-${{ needs.determine-version.outputs.version }}

    # - name: Create ZIP Archive (Direct)
    #   working-directory: ${{github.workspace}}/build
    #   run: |
    #     cd package
    #     7z a -tzip ${{github.workspace}}/build/unabara-windows-${{ needs.determine-version.outputs.version }}.zip ./unabara-windows-${{ needs.determine-version.outputs.version }}/*
    

    - name: Upload Windows Artifact
      uses: actions/upload-artifact@v4
      with:
        name: unabara-windows
        path: ${{github.workspace}}/build/unabara-windows-${{ needs.determine-version.outputs.version }}
        
    - name: Upload to Release
      if: github.event_name == 'release'
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: ${{github.workspace}}/build/unabara-windows-${{ needs.determine-version.outputs.version }}
        asset_name: unabara-windows-${{ needs.determine-version.outputs.version }}.exe
        tag: ${{ github.ref }}
        overwrite: true

  build-macos:
    needs: determine-version
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Qt
      uses: jurplel/install-qt-action@v4.1.1
      with:
        aqtversion: '==3.1.*'
        version: ${{ env.QT_VERSION }}
        host: mac
        target: desktop
        arch: clang_64
        modules: qtmultimedia
    
    - name: Configure CMake for Intel Build
      run: cmake -B ${{github.workspace}}/build-x86_64 -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_OSX_ARCHITECTURES=x86_64
      
    - name: Build Intel Version
      run: cmake --build ${{github.workspace}}/build-x86_64 --config ${{env.BUILD_TYPE}}
    
    - name: Configure CMake for ARM Build
      run: cmake -B ${{github.workspace}}/build-arm64 -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_OSX_ARCHITECTURES=arm64
      
    - name: Build ARM Version
      run: cmake --build ${{github.workspace}}/build-arm64 --config ${{env.BUILD_TYPE}}

    - name: Debug - List directory contents
      run: |
        echo "Checking x86_64 build output:"
        ls -la ${{github.workspace}}/build-x86_64/bin
        echo "Checking app bundle structure:"
        ls -la ${{github.workspace}}/build-x86_64/bin/unabara.app/Contents/MacOS
        echo "Checking arm64 build output:"
        ls -la ${{github.workspace}}/build-arm64/bin
        echo "Checking app bundle structure:"
        ls -la ${{github.workspace}}/build-arm64/bin/unabara.app/Contents/MacOS
    
    - name: Create Universal Binary and App Bundle
      run: |
        mkdir -p ${{github.workspace}}/build-universal/bin/unabara.app/Contents/MacOS
        mkdir -p ${{github.workspace}}/build-universal/bin/unabara.app/Contents/Resources
        lipo -create \
          ${{github.workspace}}/build-x86_64/bin/unabara.app/Contents/MacOS/unabara \
          ${{github.workspace}}/build-arm64/bin/unabara.app/Contents/MacOS/unabara \
          -output ${{github.workspace}}/build-universal/bin/unabara.app/Contents/MacOS/unabara

        chmod +x ${{github.workspace}}/build-universal/bin/unabara.app/Contents/MacOS/unabara
        
        # Create Info.plist
        mkdir -p package/Unabara.app/Contents/
        cat > package/Unabara.app/Contents/Info.plist << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
          <key>CFBundleExecutable</key>
          <string>unabara</string>
          <key>CFBundleIconFile</key>
          <string>unabara.icns</string>
          <key>CFBundleIdentifier</key>
          <string>org.unabara.unabara</string>
          <key>CFBundleName</key>
          <string>Unabara</string>
          <key>CFBundleDisplayName</key>
          <string>Unabara</string>
          <key>CFBundlePackageType</key>
          <string>APPL</string>
          <key>CFBundleSignature</key>
          <string></string>
          <key>CFBundleShortVersionString</key>
          <string>${{ needs.determine-version.outputs.version }}</string>
          <key>CFBundleVersion</key>
          <string>1</string>
          <key>LSMinimumSystemVersion</key>
          <string>10.14</string>
          <key>NSPrincipalClass</key>
          <string>NSApplication</string>
          <key>NSHighResolutionCapable</key>
          <true/>
          <key>LSArchitecturePriority</key>
          <array>
            <string>arm64</string>
            <string>x86_64</string>
          </array>
        </dict>
        </plist>
        EOF
    
    - name: Package Universal App with macdeployqt
      run: |
        cd ${{github.workspace}}/build-universal
        
        # Use macdeployqt to create the DMG with all dependencies
        macdeployqt bin/unabara.app -dmg -verbose=3
        
        # Rename DMG to include version
        mv bin/unabara.dmg unabara-macos-universal-${{ needs.determine-version.outputs.version }}.dmg
        
    - name: Upload macOS Universal Artifact
      uses: actions/upload-artifact@v4
      with:
        name: unabara-macos-universal-${{ needs.determine-version.outputs.version }}
        path: ${{github.workspace}}/build-universal/unabara-macos-universal-${{ needs.determine-version.outputs.version }}.dmg
        
    - name: Upload to Release
      if: github.event_name == 'release'
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: ${{github.workspace}}/build-universal/unabara-macos-universal-${{ needs.determine-version.outputs.version }}.dmg
        asset_name: unabara-macos-universal-${{ needs.determine-version.outputs.version }}.dmg
        tag: ${{ github.ref }}
        overwrite: true
